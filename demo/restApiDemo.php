<?php

/**
 * Created by PhpStorm.
 * User: 王浩然
 * Date: 2019-02-18
 * Time: 23:31
 */
class restApi extends kod_web_restApi
{
    /**
     * isLogin
     * 验证是否登陆
     *
     * @access public
     * @since 1.0
     * @return $this
     */
    public function isLogin()
    {
        $this->step(function ($data) {
            $token = $_SERVER['HTTP_TOKEN'];
            if ($token) {
                list($email, $token) = explode('@@', $token);
                if ($token === kod_db_memcache::get('user::token::' . $email)) {
                    $this->user = current(user::create()->getList(array(
                        'account' => $email
                    )));
                    return $data;
                } else {
                    httpError::set(401, '必须登陆');
                }
            } else {
                list($email, $token) = explode('@@', $_SERVER['HTTP_TOKEN']);
                if ($email === kod_db_memcache::get('token::user' . $token)) {
                    return $data;
                } else {
                    httpError::set(401, '必须登陆');
                }
            }
        });
        return self::getinstance();
    }

    public function fetch($tpl)
    {
        $this->step(function ($datas) use ($tpl) {
            $datas['__headerNav__'] = $this->headerNav;
            return $datas;
        });
        return parent::fetch($tpl); // TODO: Change the autogenerated stub
    }

    public function tdk($callback)
    {
        $this->step(function ($params) use ($callback) {
            $method = new \ReflectionFunction($callback);
            $args = array();
            foreach ($method->getParameters() as $param) {

                $name = $param->getName();//获取参数名
                //$params　参数存在于　传入的参数之中
                if (!is_array($params)) {
                    throw new Exception('每一个step闭包函数必须返回数组');
                    exit;
                }
                if (array_key_exists($name, $params)) {  //有传参数，　按传入的参数
                    //反射方法 测试该参数是否为数组类型
                    if ($param->isArray()) {
                        $args[] = (array)$params[$name];
                    } else if ($param->getType() && $param->getType()->getName() === 'int') {
                        $args[] = intval($params[$name]);
                    } elseif (!is_array($params[$name])) { //参数不是数组类型　如 name = lemon
                        $args[] = $params[$name];
                    } else {
                        throw new Exception('error');
                    }
                    unset($params[$name]);
                } elseif ($param->isDefaultValueAvailable()) {  //没有传参数，　检测时候参数有默认值
                    //getDefaultValue 获取参数默认值
                    $args[] = $param->getDefaultValue();
                } else {
                    kod_web_httpError::set(400, '必须传入参数' . $name);
                }
            }
            if (is_callable($callback)) {
                return call_user_func_array($callback, $args);
            }
        });
        $this->step(function ($tdk) {
            $page = new kod_web_page();
            $page->title = $tdk['title'];
            $page->keywords = $tdk['keywords'];
            $page->description = $tdk['description'];
            $page->links = $tdk['links'];
            $page->content = $tdk['content'];
            $page->fetch('./frontend/dist/index.html');
            exit;
        });
        return $this;
    }

    public function setNav($nav)
    {
        $this->step(function ($params) use ($nav) {
            if (is_callable($nav)) {
                $this->headerNav = call_user_func_array($nav, array($params));
            } else {
                $this->headerNav = $nav;
            }
            return $params;
        });
        return $this;
    }

    public function setLatitude($callback)
    {
        $this->step(function ($params) use ($callback) {
            if (is_callable($callback)) {
                $params['__pageLatitude__'] = call_user_func_array($callback, array($params));
            }
            return $params;
        });
        return $this;
    }

    public function mobileTurn($callback)
    {
        $this->step(function ($params) use ($callback) {
            if (is_callable($callback)) {
                $method = new \ReflectionFunction($callback);
                $args = array();
                foreach ($method->getParameters() as $param) {
                    $name = $param->getName();//获取参数名
                    //$params　参数存在于　传入的参数之中
                    if (!is_array($params)) {
                        throw new Exception('每一个step闭包函数必须返回数组');
                        exit;
                    }
                    if (array_key_exists($name, $params)) {  //有传参数，　按传入的参数
                        //反射方法 测试该参数是否为数组类型
                        if ($param->isArray()) {
                            $args[] = (array)$params[$name];
                        } else if ($param->getType() && $param->getType()->getName() === 'int') {
                            $args[] = intval($params[$name]);
                        } else if ($param->getType() && $param->getType()->getName() === 'string') {
                            if(!is_string($params[$name])) {
                                kod_web_httpError::set(400, "error:参数{$name}的数据类型错误，需要是字符串");
                                throw new Exception("error:参数{$name}的数据类型错误，需要是字符串");
                            }
                            $args[] = $params[$name];
                        } else if ($param->getType() && $param->getType()->getName() === 'bool') {
                            $args[] = $params[$name] === 'true' || $params[$name] === true;
                        } elseif (!is_array($params[$name])) { //参数不是数组类型　如 name = lemon
                            $args[] = $params[$name];
                        } else {
                            var_dump($params[$name]);
                            kod_web_httpError::set(400, "error:需要指定闭包函数的参数{$name}的数据类型");
                            throw new Exception("error:需要指定闭包函数的参数{$name}的数据类型");
                        }
                        unset($params[$name]);
                    } elseif ($param->isDefaultValueAvailable()) {  //没有传参数，　检测时候参数有默认值
                        //getDefaultValue 获取参数默认值
                        $args[] = $param->getDefaultValue();
                    } else {
                        kod_web_httpError::set(400, '必须传入参数' . $name);
                    }
                }
                $url = call_user_func_array($callback, $args);
            } else if (is_string($callback)) {
                $url = $callback;
            }
            // 先检查是否为wap代理，准确度高
            if (stristr($_SERVER['HTTP_VIA'], "wap")) {
                header("Location: " . $url);
                exit;
            } // 检查浏览器是否接受 WML.
            elseif (strpos(strtoupper($_SERVER['HTTP_ACCEPT']), "VND.WAP.WML") > 0) {
                header("Location: " . $url);
                exit;
            } //检查USER_AGENT
            elseif (preg_match('/(blackberry|configuration\/cldc|hp |hp-|htc |htc_|htc-|iemobile|kindle|midp|mmp|motorola|mobile|nokia|opera mini|opera |Googlebot-Mobile|YahooSeeker\/M1A1-R2D2|android|iphone|ipod|mobi|palm|palmos|pocket|portalmmm|ppc;|smartphone|sonyericsson|sqh|spv|symbian|treo|up.browser|up.link|vodafone|windows ce|xda |xda_)/i', $_SERVER['HTTP_USER_AGENT'])) {
                header("Location: " . $url);
                exit;
            }
            return $params;
        });
        return $this;
    }
}
